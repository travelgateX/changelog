# Node
interface Node {
  # A unique identifier
  code: ID!
  # Date created
  createdAt: Time!
  # Date updated
  updatedAt: Time!
}

# Page info
type PageInfo {
  # Has next page?
  hasNextPage: Boolean!
  # Has previous page?
  hasPreviousPage: Boolean!
  # Start cursor
  startCursor: String!
  # End cursor
  endCursor: String!
}
# Relase version
type Release implements Node{
  # A unique identifier
  code: ID!
  # Release Data
  releaseData: ReleaseData!
  # Date created
  createdAt: Time!
  # Date updated
  updatedAt: Time!
}

type ReleaseData{
  # A unique identifier
  code: ID!
  # Ref name
  name: String
  # Release version number (X.Y.Z)
  version: Version!
  # Released date
  releaseDate: Time!
}
# Source of the change
type Source{
  # A unique identifier
  code: ID!
  # Change platform
  platform: SourcePlatform!
  # User that make the changes
  author: String 
}
# Change type
enum ChangeType{
  # Added for new features
  ADDED
  # Changed for changes in existing functionality
  CHANGED
  # Deprecated for soon-to-be removed features
  DEPRECATED
  # Removed for now removed features
  REMOVED
  # Fixed for any bug fixes
  FIXED
  # Security in case of vulnerabilities
  SECURITY
}

# Source platform
enum SourcePlatform{
  GITHUB
  GITLAB
  JIRA
  SLACK
  OTHER
}
# Hello World type
type Hellow{
    # A unique indentifier.
    code: ID!
    # Hello World message
    helloWorld: String!
} 
# Changelog root schema
schema {
  query: Query
  mutation: Mutation
}
# Notable change for one version of a project
type Change implements Node{
  # A unique identifier
  code: ID!
  # Change Data
  changeData: ChangeData!
  # Date created
  createdAt: Time!
  # Date updated
  updatedAt: Time!
}

# Change info
type ChangeData{
  # A unique identifier.
  code: ID!
  # Commit category [Added, Changed, Deprecated, Removed, Fixed, Security]
  type: ChangeType!
  # Descriptive message about the changes commited.
  message: String!
  # Release version (unreleased change if not informed)
  release: Release
  # Project which changes have been made
  project: String!
  # Change date
  changeDate: Time!
  # Source of the change
  source: Source!
}

# Change connection
type ChangeConnection {
  # Change edges
  edges: [ChangeEdge]
  # Page info
  pageInfo: PageInfo!
}

# Change edge
type ChangeEdge {
  # Change edge cursor
  cursor: String!
  # Change edge node
  node: Change
}
# Changelog filter input
input ChangelogFilterInput{
  # Change type
  type: ChangeType
}
input CreateChangeInput{
  code: String
  message: String!
  project: String!
  type: ChangeType!
}
input UpdateChangeInput{
  code: String!
  message: String
  project: String
  type: ChangeType!
}
# Time is an RFC3339 timestamp.
scalar Time

# Semantic version https://semver.org/
scalar Version
# Changelog mutations
type Mutation {
  createChange(input:CreateChangeInput):Change!
  updateChange(input:UpdateChangeInput):Change!
}
# Changelog querys
type Query {
  # List of changes related to a project
  changelog(type:String, first: Int, last: Int, before: String, after:String):ChangeConnection!
  helloWorldQuery(hello:String):Hellow!
}
